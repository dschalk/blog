{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Blog.svelte",
    "../src/Monad.svelte",
    "../src/Haskell.svelte",
    "../src/Transducer.svelte"
  ],
  "sourcesContent": [
    "\n<script>\n\n   import {fade} from \"svelte/transition\"\n   let visible = true;\n\n    import Monad from './Monad.svelte'\n    import Monad2 from './Monad2.svelte'\n    import Monad3 from './Monad3.svelte'\n    import Haskell from './Haskell.svelte'\n    import Bugs from './Bugs.svelte'\n    import Matrix from './Matrix.svelte'\n    import Transducer from './Transducer.svelte'\n    import Asynchronous_Monad from './Asynchronous_Monad.svelte'\n    import ToggleTheme from './ToggleTheme.svelte'\n    import Home from './Home.svelte'\n\n    var j = 0\n\n    function monad () {j = 1; console.log(j)};\n    function monad2 () {j = 2; console.log(j)};\n    function monad3 () {j = 9; console.log(j)};\n    function haskell () {j = 3; console.log(j)};\n    function bugs () {j = 4; console.log(j)};\n    function matrix () {j = 5; console.log(j)};\n    function transduce () {j = 6}; console.log(j);\n    function async () {j = 7; console.log(j)};\n    function tog () {j = 8; console.log(j)};\n    function home () {j = 0; console.log(j)};\n\n    $: j\n\n    console.log(\"j is\", j)\n\n</script>\n\n<style>\n\nbutton {\n   font-size: 18px;\n   color: #bccbaa;\n\n}\n\n.gamma {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n}\n\n  ul {  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n  list-style: none;\n  }\n\n  tao {\n    margin-left: 3%;\n  }\n\n  .narrow {\n    font-family: monospace;\n    font-size: 22px;\n    margin-left: auto;  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 50%;\n    margin-right: auto;\n    display: block;\n    text-indent: 1.6%;\n  }\n</style>\n<div class=\"content\">\n<br><br>\n\n                        <div style = \"display: flex\">\n\n                        <div style = \"margin-Right: 2%; width: 20%\" >\n                        <br><br><br><br><br><br><br>\n                        <ul style = \"list-style: none;\">\n                        <li><div class='button'  on:click={() => j = 5}>Why Svelte</div></li>\n                        <br>\n                        <li><div>MONAD SERIES</div></li>\n                        <br>\n                        <li><button on:click={()=>{j = 1; console.log(\"j is\", j)}}>A Simple Monad</button></li>\n                        <br>\n                        <li><button  on:click={()=>{j=2; console.log(\"j is\", j)}}>Asynchronous Monads</button></li>\n                        <br>\n                        <li><button on:click={()=>{j=9; console.log(\"j is\", j)}}>Promises Monad</button></li>\n                        <br>\n                        <li><button on:click={() => {j = 7; console.log(\"j is\", j)}}>Transducer Simulator</button></li>\n                        <br>\n                        <li><div>MISCELANEOUS TOPICS</div></li>\n                        <br>\n                        <li><div class='button' on:click={() => {j = 3; console.log(\"j is\", j)}}>Hidden Haskell Information</div></li>\n                        <br>\n                        <li><div class='button'  on:click={() => {j = 4; console.log(\"j is\", j)}}>Bed Bug Eradication</div></li>\n                        <br>\n                        <li><div class='button'  on:click={() => {j = 8; console.log(\"j is\", j)}}>Toggle Theme</div></li>\n                        <br>\n                        <li><div class='button'  on:click={() => {j = 0; console.log(\"j is\", j)}}>Home</div></li>\n                        <br>\n                        </ul>\n                        </div>\n                        <div style = \"margin-Right: 2%; width: 80%\" >\n                        <div style=\" font-weight: 900; font-size: 45px; color: #bbbb00; text-align: center; \">DAVID SCHALK'S BLOG</div>\n\n\n{#if j === 0}\n\t\t<Home />\n{/if}\n{#if j === 1}\n<Monad />\n{/if}\n{#if j === 2}\n<Monad2 />\n{/if}\n{#if j === 9}\n<Monad3 />\n{/if}\n{#if j === 3}\n<Haskell />\n{/if}\n{#if j === 4}\n<Bugs />\n{/if}\n{#if j === 5}\n<Matrix />\n{/if}\n{#if j === 6}\n<Asynchronous_Monad />\n{/if}\n{#if j === 7}\n<Transducer />\n{/if}\n{#if j === 8}\n<ToggleTheme />\n{/if}\n\n\n<br><br><br>\n</div>\n</div>\n</div>\n<br><br>\n",
    "\n<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\nlet monadDisplay = `function Monad (z) {\n    var x = z;\n    var foo = function foo (func) {\n        var stop = 'stop';\n        if (func.name === 'stop') return x\n        else {\n            x = func(x);\n            return foo;\n        }\n    };\n    return foo;\n}\n\nconst prod = a => b => a*b;\nconst sum = a => b => a+b;`\n\nlet bonadsD = `function bonads(num) {\nreturn [Monad(num)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-3)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-0)(sum(7))(prod(4))(v=>v-10)(stop)]}`\n\nlet axe = `\nlet mon = Monad(3);\nlet a = mon(x=>x**3)(x=>x+3)(x=>x**2)(stop);\nconsole.log(\"a is\", a)  // a is 900`\n\nlet tree = `\nmon(x => x/100)\nconsole.log(\"mon(stop) now is\",mon(stop))  // mon(stop) now is 9 `\n\nlet fred = `\nlet ar = [];\nlet mon = Monad(3);\nlet mon2 = Monad();\nar.push(mon(stop));\nvar a = mon(x=>x**3)(x=>x+3)(x=>x**2)\nar.push(a);\nar.push(mon(x => x/100);\nar.push(mon2(mon(stop)(x=>x*100)))\nconsole.log(\"ar.map(v=>v('stop')) is\", ar.map(v=>v('stop')))  // [3, 900, 9] `\n\nfunction Monad (z) {\n  var x = z;\n  var stop = \"stop\";\n  var foo = function foo (func) {\n    if (func.name === \"stop\") return x\n    else {\n      x = func(x);\n      return foo;\n    }\n  };\n  return foo;\n}\n\nconst prod = a => b => a*b;\nconst sum = a => b => a+b;\n\nlet num = 6;\n\nlet bonads = function bonads(num) {\nreturn [Monad(num)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-3)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-2)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-1)(sum(7))(prod(4))(v=>v-10)(stop),\nMonad(num-0)(sum(7))(prod(4))(v=>v-10)(stop)]}\n\n\nlet mona = bonads(num);\n$: mona\nconsole.log(mona)\n\nfunction numF (e) {num = e.target.value; console.log(\"e.target.value is\", e.target.value); return e.target.value}\n$: num\n\nconsole.log(\"num is\", num);\n</script>\n\n<style>\n.tao {\n  margin-left: 3%;\n}\n\nh3 {\n   font-size: 27px;\n}\n\n#aside {\n    font-size: 18px;\n    color: #eeaaff;\n    font-style: italic;\n}\n</style>\n<br><br><br>\n {#if visible}\n \t<div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nA SIMPLE LITTLE MONAD\n \t</div>\n {/if}\n <br>\n<span class=\"tao\"> The word \"monad\" has been around for centuries. Gottfried Leibniz published </span>\n<span style = \"font-style: italic\"> Monadology </span>\n<span> in 1714. The precursor to the familiar symbol of yin-yang, taijitu (太極圖), has a version with two dots added, has been given the august designation: \"The Great Monad\". A single note in music theory is called a monad. All of this is too tangential to warrant references. I Googled around a little to get it and you can too if the word \"monad\" interests you.</span>\n<p> Monads in the Haskell Programming Language were inspired by Category Theory monads. In order to be Category Theory monads, function must exist in a mathematically rigorous \"category\". Haskells objects and functions are not the objects and morphisms of Category Theory. Making a category out of most of Haskell's functions and types is an amusing pasttime for some people, but I doubt that it has any practical value. </p>\n<p> So it should be no surprise that my JavaScript monads are not Category Theory monads. They do obey a JavaScript version of the Haskell monad laws, which are not a requirement in Haskell but are indicative of utility and robustness objects (including functions) don't constitute a category. But functions that hold values and compose with multiple functions that operate on their values behave like Category Theory monads enough to justify calling them \"monads\".</p>\n<p> Here's the definitions of three functions: </p>\n<pre>{monadDisplay}</pre>\n<p> And here is an anonymous monad followed by three functions and \"stop\". : </p>\n<pre> Monad(6)(sum(7))(prod(4))(v=>v-10)(stop) // 42 </pre>\n<p> Anonymous monads never interfere with other monads. The demonstration below illustrates this by running seven anonymous monads in rapid succession. The number you enter is \"num\" in </p>\n{bonadsD}\n<input id = \"one\" type = \"number\" on:input={bonads}  bind:value={num} />\n<p> num is {num} so bonads(num) returns {bonads(num)} </p>\n\n<span class = tao> Named monads retain their values, even after they encounter \"stop\" and return the value of x held in the Monad closure. The following examples illustrate this: </span>\n<pre>\n{axe}\n</pre>\n\n<p> As expected, mon returns which is the \"foo()\" returned by by calling Monad(3):</p>\n\n<p> mon is still the foo() returned by Monad(). Because mon points to x in the context of its creation by Monad(), x will not be garbage collected. Care should be taken not to polute memory with useless x's.</p>\n\n<p> One reason Svelte is so fast and efficient is that it mutates variables and the attributes and methods of objects. Each module in a discrete global space.  When modules are small, applications are easy to organize and mutations don't have unforseen effects in other parts of applications. Svelte shook off the bonds of current conventional \"wisdom\" advocating immutability, virtual DOM, and assigning types to functions. </p>\n<p> The next entry in the monad series defines a variation of Monad that maintains and array of primitive data, function return values, and Promise resolution values. Functions have access to everything in the array when they execute. </p>\n",
    "\n\n\n<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\nlet GHC_IO = `module GHC.IO.Unsafe (\n    unsafePerformIO, unsafeInterleaveIO,\n    unsafeDupablePerformIO, unsafeDupableInterleaveIO,\n    noDuplicate,\n  ) where\n\nimport GHC.Base\n\nThis is a \\\"back door\\\" into the \\'IO\\' monad, allowing\\'IO\\' computation to be performed at any time.  For this to be safe, the \\'IO\\' computation should be free of side effects and independent of its environment.\n `\n</script>\n\n<style>\n\nh3 {\n    font-size: 27px;\n}\n#large {\n     font-size: 23px;\n     color: #aaddff;\n}\n</style>\n{#if visible}\n <div style = \"font-family: Times New Roman; text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\n <br><br>\nHASKELL TUTORIAL SUPPLEMENT\n </div>\n{/if}\n\n<p> If you are learning to program in Haskell, the book or blog or YouTube video on which you rely might be telling you that mutations can occur only inside of monads or somewhere away from a program such as the command line or a browser. You might be learning that mutations and side effects can occur only in the lazy IO monad. If so, don't believe it. You are being misled.  </p>\n<p> Even if you resent being lied to, you might find value in some of the dishonest learning resources. They are trying to teach best practices. Just know know that it is easy to mutate values and types anywhere in a Haskell program. Doing so before you know what your compiler (presumably GHC) will do with your mutations is asking for bugs and crashes.  Here are some unsafe functions with descriptions from their creators and maintainers: </p>\n<p id = large> Unsafe.Coerce </p>\n<p> The highly unsafe primitive unsafeCoerce converts a value from any type to any other type. Needless to say, if you use this function, it is your responsibility to ensure that the old and new types have identical internal representations, in order to prevent runtime corruption. </p>\n<span class = tao> The only function in this library is unsafeCoerce :: a -> b. You can read more about it at </span>\n<a href = \"http://hackage.haskell.org/package/base-4.12.0.0/docs/Unsafe-Coerce.html\" target = \"_blank\">Unsafe.Coerce</a>\n<br />\n<pre> GHC.IO.Unsafe </pre>\n<p> If the IO computation wrapped in \\'unsafePerformIO\\' performs side effects, then the relative order in which those side effects take place (relative to the main IO trunk, or other calls to \\'unsafePerformIO\\') is indeterminate.  Furthermore, when using \\'unsafePerformIO\\' to cause side-effects, you should take the following precautions to ensure the side effects are performed as many times as you expect them to be.  Note that these precautions are necessary for GHC, but may not be sufficient, and other compilers may require different precautions. </p>\n<span class = tao > For more information, go to </span>\n<a href = \"http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.IO.Unsafe.html\" target = \"_blank\"> GHC.IO.Unsafe </a>\n<br />\n<br />\n<span class = tao> And here\\'s a stub on the Haskell Wiki site that isn\\'t generating much interest: </span>\n<a href = \"https://wiki.haskell.org/Unsafe_functions\" target = \"_blank\" > More on GHC.IO.Unsafe </a>\n<span> along with a discussion of mutable global variables in Haskell programs: </span>\n<a href = \"https://wiki.haskell.org/Top_level_mutable_state\" target = \"_blank\"> Top level mutable state </a>\n",
    "<script>\nimport {fade} from \"svelte/transition\"\nlet visible = true;\n\n\nvar k  = 100000000;\n$: k;\nvar ltTest = x => y => new Filt(x => y < x);\n$: ltTest;\n\nvar isOdd = function isOdd (x) {return new Filt(v => v % 2 === 1)};\nvar fives = function fives (x) {\n if (typeof x === \"number\") {return new Filt(v => v % 10 === 5)}\n else if (typeof x === \"string\") {return Filt(v = v(v.length - 1))}\n else {return undefined}''\n}\n\nvar isOddF = function isOddF (x) {return new Filt(v => v % 2 === 1)};\n\nfunction isOd_ (x) {return new Filt(v => v % 2 === 1)};\nvar lessThan = x => y => new Filt(x => y < x);\n\nfunction tdReduce(base) {\n  return function(reducingFunction) {\n    return (accumulator, value) => {\n      return reducingFunction(accumulator, func(v));\n    }\n  }\n}\n\nfunction tdMap(func) {\n  return function(reducingFunction) {\n    return (accumulator, v) => {\n      return reducingFunction(accumulator, func(v));\n    }\n  }\n}\n\nfunction tdFilter(test) {\n  return function(reducingFunction) {\n    return (accumulator, v) => {\n      return (test(v) ? reducingFunction(accumulator, v) : accumulator)\n    };\n  };\n};\n\nvar ar = \"cowgirl\";\n$: ar;\n\nvar cleanF = function cleanF (arthur = []) {\n  ar = arthur;\n  return ar.filter(\n    a => a === 0 || a && typeof a !== \"boolean\" //\n  ).reduce((a,b)=>a.concat(b),[])\n};\n\n$: cleanF;\n\n\nfunction Monad ( AR = [] )  {\n  var f_, p, run;\n  var ar = AR.slice();\n  var x = ar.pop();\n  return run = (function run (x) {\n    if (x === null || x === NaN ||\n      x === undefined) x = f_('stop').pop();\n    if (x instanceof Filt) {\n      var z = ar.pop();\n      if (x.filt(z)) x = z; else ar = [];\n    }\n    else if (x instanceof Promise) x.then(y =>\n      {if (y != undefined && typeof y !== \"boolean\" && y === y &&\n      y.name !== \"f_\" &&\n      y.name !== \"stop\" ) {\n      ar.push(y);\n    }})\n    else if (x != undefined && x === x  && x !== false\n      && x.name !== \"f_\" && x.name !== \"stop\" ) {\n      ar.push(x);\n    };\n    function f_ (func) {\n      if (func === 'stop' || func === 'S') return ar;\n      else if (func === 'finish' || func === 'F') return Object.freeze(ar);\n      else if (typeof func !== \"function\") p = func;\n      else if (x instanceof Promise) p = x.then(v => func(v));\n      else p = func(x);\n      return run(p);\n    };\n\n    return f_;\n  })(x)\n}\n\nvar mon44 = `function Monad ( AR = [] )  {\n  var f_, p, run;\n  var ar = AR.slice();\n  var x = ar.pop();\n  return run = (function run (x) {\n    if (x === null || x === NaN ||\n      x === undefined) x = f_('stop').pop();\n    if (x instanceof Filt) {\n      var z = ar.pop();\n      if (x.filt(z)) x = z; else ar = [];\n    }\n    else if (x instanceof Promise) x.then(y =>\n      {if (y != undefined && typeof y !== \"boolean\" && y === y &&\n      y.name !== \"f_\" &&\n      y.name !== \"stop\" ) {\n      ar.push(y);\n    }})\n    else if (x != undefined && x === x  && x !== false\n      && x.name !== \"f_\" && x.name !== \"stop\" ) {\n      ar.push(x);\n    };\n    function f_ (func) {\n      if (func === 'stop' || func === 'S') return ar;\n      else if (func === 'finish' || func === 'F') return Object.freeze(ar);\n      else if (typeof func !== \"function\") p = func;\n      else if (x instanceof Promise) p = x.then(v => func(v));\n      else p = func(x);\n      return run(p);\n    };\n\n    return f_;\n  })(x)\n} `\n\nfunction Filt (p) {this.p = p; this.filt = function filt (x) {return p(x)}};\n\nvar compose = (...fns) =>\nfns.reduceRight((prevFn, nextFn) =>\n(...args) => nextFn(prevFn(...args)),\nvalue => value\n);\n\nvar add1 = function add1(v) { return v + 1; };\nvar sum = function sum(total,v) { return total + v; };\nvar cube = function cube(v) { return v**3; };\n\nvar size = 100;\n$: size;\n\nvar ar74 = [...Array(size).keys()];\n$: ar74;\n\nvar mapWRf = mapping(cube);\nvar mapRes = ar74.reduce(mapWRf(concat), []);\nconsole.log(\"mapRes is\", mapRes);\n\nvar isEven = x => x % 2 === 0;\nvar not = x => !x;\nvar isOdd2 = compose(not, isEven);\n\nfunction curry(fn) {\n   var arity = fn.length;\n   return function $curry(...args) {\n      if (args.length < arity) {\n         return $curry.bind(null, ...args);\n      }\n      return fn.call(null, ...args);\n   }  ;\n}\n\nvar map = f => ar => ar.map(v=>f(v));\nvar filter = p => ar => ar.filter(p);\nvar reduce = f => ar => v => ar.reduce(f,v)\nfunction apply(x, f) {return f(x);}\nfunction concat(xs, val) {return xs.concat(val);}\n\nfunction mapping(f) {\n   return function(rf) {\n      return (acc, val) => {\n         return rf(acc, f(val));\n      }\n   }\n}\n\nvar A_A = \"H\";\n$: A_A;\n\nvar B_B = \"s\";\n$: B_B;\n\nvar C_C = \"G\";\n$: C_C;\n\nvar D_D = \"I\";\n$: D_D;\n\nvar res1;\n$: res1;\n\nvar res2;\n$: res2;\n\nvar res3;\n$: res3;\n\nvar res4;\n$: res4;\n\nvar dotResult = [];\n$: dotResult;\n\nvar test9;\n$: test9;\n\nvar transducerResult;\n$: transducerResult;\n\nconsole.log(\"blah blah blah\");\n\n A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n   .map(v=>v+1000)\n   .filter(v => v % 10 === 5)\n   console.log(\"dotResult is\", dotResult);\n\nvar td1;\n$: td1;\n\nvar td2;\n$: td2;\n\nvar td3;\n$: td3;\n\nvar xform;\n$: xform;\n\nvar xform2;\n$: xform2;\n\nvar xform3;\n$: xform3\n\n\nvar test8 = k => ltTest(k).filt;;\n\nvar test9\n$: test9;\n\n   td1 = x => Monad([x])(isOdd)(v=>v**4)(v=>v+3)(v=>(v-3)/Math.sqrt(v-3))('stop').pop()\n   td2 = y => Monad([y])(v=>v*v)(v=>v+1000)(fives)('stop').pop()\n\nres1 = ar74.map(x => td1(x));\nB_B =  res2 = res1.map(y => td2(y));\nC_C = res3 = ar74.map(z => td2(td1(z)));\n\n   console.log(\"cleanF(res2) is\", cleanF(res2));\n   console.log(\"cleanF(res3) is\", cleanF(res3));\n\n   xform = compose(\n      tdFilter(x=>x%2===1),\n      tdMap(x => x**4),\n      tdMap(x => x+3),\n      tdMap(x => x-3),\n      tdMap(x => Math.sqrt(x))\n   )\n   xform2 = compose(\n      tdMap(x=>x*x),\n      tdMap(x=>x+1000),\n      tdFilter(x => x % 10 === 5)\n   );\n\n   xform3 = compose(\n      tdFilter(x=>x%2===1),\n      tdMap(x => x**4),\n      tdMap(x => x+3),\n      tdMap(x => x-3),\n      tdMap(x => Math.sqrt(x)),\n      tdMap(x=>x*x),\n      tdMap(x=>x+1000),\n      tdFilter(x => x % 10 === 5)\n   );\n   D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n   $: transducerResult = ar74.reduce(xform3(concat),[] );\n   console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\")\n   console.log(\"transducerResult is\", transducerResult);\n   console.log(\"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\")\n\n   $: A_A = dotResult;\n   $: B_B = cleanF(res2);\n   $: C_C = cleanF(res3);\n   $: D_D = transducerResult;\n\n   console.log(\"A_A is\", A_A)\n   console.log(\"B_B is\", B_B)\n   console.log(\"C_C is\", C_C)\n   console.log(\"D_D is\", D_D)\n\nvar gotty = \"<div style = 'color: #FFAAAA; font-size: 20px'>The traditional dot multiple-traversals result:</div><br><div style = 'color: #FFFFAA'>\"+dotResult.join(\" \")+\"</div><br><br><div style = 'color: #FFAAAA; font-size: 20px'>The monad two-traversals result:</div><br><div style = 'color: #FFFFAA'>\"+res2.join(\" \")+\"</div><br><br><div style = 'color: #FFAAAA; font-size: 20px'>The monad one-traversals result:</div><br><div style = 'color: #FFFFAA'>\"+res3.join(\" \")+\"</div><br>  <br> <div style = 'color: #FFAAAA; font-size: 20px'> Standard transducer one traversal result:</div><br><div style = 'color: #FFFFAA'>\"+ transducerResult.join(\" \")+\"</div>\";\n\nvar t37;\n$: t37;\nfunction test37 (e) {t37 = e; console.log(e)};\n\nconsole.log(\"res4 is\", res4);\n\n$: dotResult;\n$: res2;\n$: res3;\n$: transducerResult;\n\nfunction increase () {\n  size = size + 10;\n  ar74 = [...Array(size).keys()];\n  res1 = ar74.map(x => td1(x));\n   A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n   .map(v=>v+1000)\n   .filter(v => v % 10 === 5)\n  B_B = res2 = res1.map(y => td2(y));\n  C_C = res3 = ar74.map(z => td2(td1(z)));\n  D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n}\n\nfunction decrease () {\n  size = size - 10;\n  ar74 = [...Array(size).keys()];\n  res1 = ar74.map(x => td1(x));\n   A_A = dotResult = ar74\n   .filter(v => (v % 2 === 1))\n   .map(x => x**4)\n   .map(x => x+3)\n   .map(x => x-3)\n   .map(x => Math.sqrt(x))\n   .map(v=>v*v)\n   .map(v=>v+1000)\n   .filter(v => v % 10 === 5)\n  B_B = res2 = res1.map(y => td2(y));\n  C_C = res3 = ar74.map(z => td2(td1(z)));\n  D_D = transducerResult = ar74.reduce(xform3(concat),[] );\n}\n\n$: size;\n$: ar74;\n$: increase;\n$: decrease;\nincrease();\ndecrease();\n  </script>\n<style>\n.p {\n  color: #FFAAAA;;\n  font-size: 20px;\n}\n.q {\n  color: #FFFFAA;\n}\n</style>\n<br><br><br>\n{#if visible}\n <div style = \"font-family: Times New Roman;  text-align: center; color: hsl(210, 90%, 90%); font-size: 32px;\" transition:fade>\nTRANSDUCER SIMULATION\n </div>\n{/if}\n<br><br>\n<p> The tradition JavaScript method of composing functions using mainly map, filter, and reduce dot notation (eg. \"array.map(func1).filter(func2).map(func3)\") polutes memory with arrays that are used only to compute the next array in a chain. Moreover, each of the soon-to-be useless arrays must be traversed. When arrays are large and numerous functions are involved, this can be a performance bottleneck.</p>\n<p> Transducers provide an ingenious solution to the problem. Any JavaScript developer who hasn't already done so would do well to get a good night's sleep, drink a big cup of coffee, and wrap his or her head around the transducer algorithm.</p>\n<p> Another, more straightforward one-array-traversal solution is to use monads. This post shows the result of an array being traversed only one time and, with the help of a monad, undersoing multiple transformations by a collection of functions. The result is the same result obtained by the dot method and a standard transducer.</p>\n<p> The following results were obtained by eight transformations on an array of the first 100 integers:</p>\n<br><br>\n<div class = p> Traditional dot composition </div>\n<br>\n<div class = q >[{A_A.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition in two stages using Monad </div>\n<br>\n<div class = q > [{B_B.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition in one traversal using Monad </div>\n<br>\n<div class = q > [{C_C.join(\", \")}]</div>\n<br>\n<br>\n<div class = p> Composition using a standard transducer </div>\n<br>\n<div class = q > [{D_D.join(\", \")}]</div>\n<br>\n<br>\n<button on:click = {increase}>INCREASE</button>\n<button on:click = {decrease}>DECREASE</button>\n<br><br>\n<div>Array length: {size}</div>\n<br>\n<div>ar74: [{ar74.join(\", \")}]</div>\n<br>\n<div>The modified Monad used in this post could use some refactoring. Here it is:</div>\n<pre>{mon44}</pre>\n\n\n..\n"
  ],
  "names": [],
  "mappings": "AAsCA,MAAM,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAEjB,CAAC,AASC,EAAE,cAAC,CAAC,AAAE,OAAO,CAAE,KAAK,CACpB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,IAAI,AAChB,CAAC;ACiCH,IAAI,eAAC,CAAC,AACJ,WAAW,CAAE,EAAE,AACjB,CAAC;ACnED,MAAM,cAAC,CAAC,AACH,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AACnB,CAAC;ACsUD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,OAAO,AAChB,CAAC"
}